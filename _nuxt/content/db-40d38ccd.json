{"_env":"NODEJS","_serializationMethod":"normal","_autosave":false,"_autosaveInterval":5000,"_collections":[{"name":"items","unindexedSortComparator":"js","defaultLokiOperatorPackage":"js","_dynamicViews":[],"uniqueNames":[],"transforms":{},"rangedIndexes":{},"_data":[{"slug":"util","name":["addObjectProperty"],"fileContents":"/**\n *\n * @name addObjectProperty\n *\n * @summary How do you add a key-value pair or new property to an object?\n *\n * @since 1.3.0\n *\n * @category Object\n *\n * @param {Object} x - Object to add new property to\n * @param {string} y - Property name\n * @param {any} z - Property value\n *\n * @return {Object} Provided object with new property added\n *\n * @example\n * => polyfig.addObjectProperty({}, \"poly\", [\"fig\"]);\n * => {\"poly\": [\"fig\"]}\n */\n\nfunction addObjectProperty(x, y, z) {\n    return typeof x === \"object\" && x !== null && typeof y === \"string\"\n        ? (x[y] = z)\n        : new Error(\"x is not of type object or y is not of type string\");\n}\n\nmodule.exports = addObjectProperty;\n","code":"function addObjectProperty(x, y, z) {\n    return typeof x === \"object\" && x !== null && typeof y === \"string\"\n        ? (x[y] = z)\n        : new Error(\"x is not of type object or y is not of type string\");\n}\n\nmodule.exports = addObjectProperty;\n","summary":["How do you add a key-value pair or new property to an object?"],"since":["1.3.0"],"category":["Object"],"params":["{Object} x - Object to add new property to","{string} y - Property name","{any} z - Property value"],"ret":["{Object} Provided object with new property added"],"example":["polyfig.addObjectProperty({}, \"poly\", [\"fig\"]);","{\"poly\": [\"fig\"]}"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":1},{"slug":"util","name":["capitalise"],"fileContents":"/**\n *\n * @name capitalise\n *\n * @summary How do you capitalise the first letter of a string?\n *\n * @since 1.2.0\n *\n * @category string\n *\n * @param {string} x - To capitalise\n *\n * @return {string} Capitalised string\n *\n * @example\n * => polyfig.capitalise(\"hello\");\n * => \"Hello\"\n */\n\nfunction capitalise(x) {\n    return typeof x === \"string\" && x !== null\n        ? x.charAt(0).toUpperCase() + x.slice(1)\n        : new Error(\"x is not of type string\");\n}\n\nmodule.exports = capitalise;\n","code":"function capitalise(x) {\n    return typeof x === \"string\" && x !== null\n        ? x.charAt(0).toUpperCase() + x.slice(1)\n        : new Error(\"x is not of type string\");\n}\n\nmodule.exports = capitalise;\n","summary":["How do you capitalise the first letter of a string?"],"since":["1.2.0"],"category":["string"],"params":["{string} x - To capitalise"],"ret":["{string} Capitalised string"],"example":["polyfig.capitalise(\"hello\");","\"Hello\""],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":2},{"slug":"util","name":["deleteFromObj"],"fileContents":"/**\n *\n * @name deleteFromObj\n *\n * @summary How do you delete or remove a property from an object?\n *\n * @since 1.1.0\n *\n * @category Object\n *\n * @param {Object} x - Object\n * @param {string} y - Property to remove\n *\n * @return {boolean} `true` or `false`\n *\n * @example\n * => polyfig.deleteFromObj({\"polyfig\": \"fig\"}, \"polyfig\");\n * => {}\n */\n\nfunction deleteFromObj(x, y) {\n    return typeof x === \"object\" && x !== null\n        ? delete x[y]\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = deleteFromObj;\n","code":"function deleteFromObj(x, y) {\n    return typeof x === \"object\" && x !== null\n        ? delete x[y]\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = deleteFromObj;\n","summary":["How do you delete or remove a property from an object?"],"since":["1.1.0"],"category":["Object"],"params":["{Object} x - Object","{string} y - Property to remove"],"ret":["{boolean} `true` or `false`"],"example":["polyfig.deleteFromObj({\"polyfig\": \"fig\"}, \"polyfig\");","{}"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":3},{"slug":"util","name":["endsWith"],"fileContents":"/**\n *\n * @name endsWith\n *\n * @summary How do you check if a string ends with a particular character?\n *\n * @since 1.4.0\n *\n * @category string\n *\n * @param {string} x - `string` to check\n * @param {string} y - Character to validate as a suffix\n *\n * @return {boolean} `true` or `false`\n *\n * @example\n * => polyfig.endsWith(\"polyfig\", \"g\");\n * => true\n */\n\nfunction endsWith(x, y) {\n    return typeof x === \"string\" && typeof y === \"string\"\n        ? x.indexOf(y, x.length - y.length) !== -1\n        : new Error(\"x or y is not of type string\");\n}\n\nmodule.exports = endsWith;\n","code":"function endsWith(x, y) {\n    return typeof x === \"string\" && typeof y === \"string\"\n        ? x.indexOf(y, x.length - y.length) !== -1\n        : new Error(\"x or y is not of type string\");\n}\n\nmodule.exports = endsWith;\n","summary":["How do you check if a string ends with a particular character?"],"since":["1.4.0"],"category":["string"],"params":["{string} x - `string` to check","{string} y - Character to validate as a suffix"],"ret":["{boolean} `true` or `false`"],"example":["polyfig.endsWith(\"polyfig\", \"g\");","true"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":4},{"slug":"util","name":["isEmail"],"fileContents":"/**\n *\n * @name isEmail\n *\n * @summary How do you validate an e-mail address?\n *\n * @since 1.2.0\n *\n * @category string\n *\n * @param {string} x - To validate\n *\n * @return {boolean} `true` or `false`\n *\n * @example\n * => polyfig.isEmail(\"jamie418sec.com\");\n * => false\n */\n\nfunction isEmail(x) {\n    return typeof x === \"string\" && x !== null\n        ? /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n              x.toLowerCase()\n          )\n        : new Error(\"x is not of type string\");\n}\n\nmodule.exports = isEmail;\n","code":"function isEmail(x) {\n    return typeof x === \"string\" && x !== null\n        ? /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n              x.toLowerCase()\n          )\n        : new Error(\"x is not of type string\");\n}\n\nmodule.exports = isEmail;\n","summary":["How do you validate an e-mail address?"],"since":["1.2.0"],"category":["string"],"params":["{string} x - To validate"],"ret":["{boolean} `true` or `false`"],"example":["polyfig.isEmail(\"jamie418sec.com\");","false"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":5},{"slug":"util","name":["isKeyInObject"],"fileContents":"/**\n *\n * @name isKeyInObject\n *\n * @summary How do you validate that a key or property exists in an object?\n *\n * @since 1.2.0\n *\n * @category Object\n *\n * @param {Object} x - Object to check for key or property\n * @param {string} y - Property to validate exists in object\n *\n * @return {boolean} `true` or `false`\n *\n * @example\n * => polyfig.isKeyInObject({\"poly\": \"fig\"}, \"poly\");\n * => true\n */\n\nfunction isKeyInObject(x, y) {\n    return typeof y === \"object\" && y !== null && typeof x === \"string\"\n        ? y.hasOwnProperty(x)\n        : new Error(\"y is not of type object or x is not type string\");\n}\n\nmodule.exports = isKeyInObject;\n","code":"function isKeyInObject(x, y) {\n    return typeof y === \"object\" && y !== null && typeof x === \"string\"\n        ? y.hasOwnProperty(x)\n        : new Error(\"y is not of type object or x is not type string\");\n}\n\nmodule.exports = isKeyInObject;\n","summary":["How do you validate that a key or property exists in an object?"],"since":["1.2.0"],"category":["Object"],"params":["{Object} x - Object to check for key or property","{string} y - Property to validate exists in object"],"ret":["{boolean} `true` or `false`"],"example":["polyfig.isKeyInObject({\"poly\": \"fig\"}, \"poly\");","true"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":6},{"slug":"util","name":["isObjectEmpty"],"fileContents":"/**\n *\n * @name isObjectEmpty\n *\n * @summary How do you validate that an object is empty?\n *\n * @since 1.2.0\n *\n * @category Object\n *\n * @param {Object} x - Object to validate is empty\n *\n * @return {boolean} `true` or `false`\n *\n * @example\n * => polyfig.isObjectEmpty({});\n * => true\n */\n\nfunction isObjectEmpty(x) {\n    return typeof x === \"object\" && x !== null\n        ? Object.keys(x).length === 0 && x.constructor === Object\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = isObjectEmpty;\n","code":"function isObjectEmpty(x) {\n    return typeof x === \"object\" && x !== null\n        ? Object.keys(x).length === 0 && x.constructor === Object\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = isObjectEmpty;\n","summary":["How do you validate that an object is empty?"],"since":["1.2.0"],"category":["Object"],"params":["{Object} x - Object to validate is empty"],"ret":["{boolean} `true` or `false`"],"example":["polyfig.isObjectEmpty({});","true"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":7},{"slug":"util","name":["mergeObjects"],"fileContents":"/**\n *\n * @name mergeObjects\n *\n * @summary How do you merge two objects together?\n *\n * @since 1.2.0\n *\n * @category Object\n *\n * @param {Object} x - Object to merge\n * @param {Object} y - Object to merge\n *\n * @return {Object} Merged object with contents of `x` and `y`\n *\n * @example\n * => polyfig.mergeObjects({\"poly\": \"fig\"}, {\"fig\": \"poly\"});\n * => {\"poly\": \"fig\",\"fig\": \"poly\"}\n */\n\nfunction mergeObjects(x, y) {\n    return typeof x === \"object\" &&\n        typeof y === \"object\" &&\n        x !== null &&\n        y !== null\n        ? { ...x, ...y }\n        : new Error(\"x or y is not of type object\");\n}\n\nmodule.exports = mergeObjects;\n","code":"function mergeObjects(x, y) {\n    return typeof x === \"object\" &&\n        typeof y === \"object\" &&\n        x !== null &&\n        y !== null\n        ? { ...x, ...y }\n        : new Error(\"x or y is not of type object\");\n}\n\nmodule.exports = mergeObjects;\n","summary":["How do you merge two objects together?"],"since":["1.2.0"],"category":["Object"],"params":["{Object} x - Object to merge","{Object} y - Object to merge"],"ret":["{Object} Merged object with contents of `x` and `y`"],"example":["polyfig.mergeObjects({\"poly\": \"fig\"}, {\"fig\": \"poly\"});","{\"poly\": \"fig\",\"fig\": \"poly\"}"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":8},{"slug":"util","name":["onlyUniqueValues"],"fileContents":"/**\n *\n * @name onlyUniqueValues\n *\n * @summary How do you remove duplicate values from an array?\n *\n * @since 1.2.0\n *\n * @category Array\n *\n * @param {Array} x - Array with non-unique values\n *\n * @return {Array} Array with only unique values\n *\n * @example\n * => polyfig.onlyUniqueValues([1,2,3,1]);\n * => [1,2,3]\n */\n\nfunction onlyUniqueValues(x) {\n    return Array.isArray(x) && x !== null\n        ? x.filter((value, index, self) => {\n              return self.indexOf(value) === index;\n          })\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = onlyUniqueValues;\n","code":"function onlyUniqueValues(x) {\n    return Array.isArray(x) && x !== null\n        ? x.filter((value, index, self) => {\n              return self.indexOf(value) === index;\n          })\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = onlyUniqueValues;\n","summary":["How do you remove duplicate values from an array?"],"since":["1.2.0"],"category":["Array"],"params":["{Array} x - Array with non-unique values"],"ret":["{Array} Array with only unique values"],"example":["polyfig.onlyUniqueValues([1,2,3,1]);","[1,2,3]"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":9},{"slug":"util","name":["removeFromArray"],"fileContents":"/**\n *\n * @name removeFromArray\n *\n * @summary How do you remove a specific element from an array?\n *\n * @since 1.0.2\n *\n * @category Array\n *\n * @param {Array} x - Array\n * @param {any} y - Remove all instances of\n *\n * @return {Array} `x` with all instances of `y` removed\n *\n * @example\n * => polyfig.removeFromArray([\"1\",\"1\",2,3], \"1\");\n * => [2,3]\n */\n\nfunction removeFromArray(x, y) {\n    return Array.isArray(x)\n        ? x.filter((item) => item !== y)\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = removeFromArray;\n","code":"function removeFromArray(x, y) {\n    return Array.isArray(x)\n        ? x.filter((item) => item !== y)\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = removeFromArray;\n","summary":["How do you remove a specific element from an array?"],"since":["1.0.2"],"category":["Array"],"params":["{Array} x - Array","{any} y - Remove all instances of"],"ret":["{Array} `x` with all instances of `y` removed"],"example":["polyfig.removeFromArray([\"1\",\"1\",2,3], \"1\");","[2,3]"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":10},{"slug":"util","name":["removeFromString"],"fileContents":"/**\n *\n * @name removeFromString\n *\n * @summary How do you remove a substring from another string?\n *\n * @since 1.0.2\n *\n * @category string\n *\n * @param {string} x - String to be reduced\n * @param {string} y - Remove all instances of\n *\n * @return {string} `x` with substrings matching `y` removed\n *\n * @example\n * => polyfig.removeFromString(\"polyfig polyfig\", \"fig\");\n * => \"poly poly\"\n */\n\nfunction removeFromString(x, y) {\n    return typeof x === \"string\" && typeof y === \"string\"\n        ? x.split(y).join(\"\")\n        : new Error(\"Both inputs are not of type string\");\n}\n\nmodule.exports = removeFromString;\n","code":"function removeFromString(x, y) {\n    return typeof x === \"string\" && typeof y === \"string\"\n        ? x.split(y).join(\"\")\n        : new Error(\"Both inputs are not of type string\");\n}\n\nmodule.exports = removeFromString;\n","summary":["How do you remove a substring from another string?"],"since":["1.0.2"],"category":["string"],"params":["{string} x - String to be reduced","{string} y - Remove all instances of"],"ret":["{string} `x` with substrings matching `y` removed"],"example":["polyfig.removeFromString(\"polyfig polyfig\", \"fig\");","\"poly poly\""],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":11},{"slug":"util","name":["sizeOfObject"],"fileContents":"/**\n *\n * @name sizeOfObject\n *\n * @summary How do you calculate the number of properties inside an object?\n *\n * @since 1.2.0\n *\n * @category Object\n *\n * @param {Object} x - Object\n *\n * @return {Number} Number of properties in object `x`\n *\n * @example\n * => polyfig.sizeOfObject({\"poly\": \"fig\", \"fig\": \"poly\"});\n * => 2\n */\n\nfunction sizeOfObject(x) {\n    return typeof x === \"object\" && x !== null\n        ? Object.keys(x).length\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = sizeOfObject;\n","code":"function sizeOfObject(x) {\n    return typeof x === \"object\" && x !== null\n        ? Object.keys(x).length\n        : new Error(\"x is not of type object\");\n}\n\nmodule.exports = sizeOfObject;\n","summary":["How do you calculate the number of properties inside an object?"],"since":["1.2.0"],"category":["Object"],"params":["{Object} x - Object"],"ret":["{Number} Number of properties in object `x`"],"example":["polyfig.sizeOfObject({\"poly\": \"fig\", \"fig\": \"poly\"});","2"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":12},{"slug":"util","name":["sortArrayByKey"],"fileContents":"/**\n *\n * @name sortArrayByKey\n *\n * @summary How do you sort/order objects in an array by a common property?\n *\n * @since 1.2.0\n *\n * @category Object, Array\n *\n * @param {Array} x - Array of objects to sort/order\n * @param {string} y - Name of property to sort/order by\n *\n * @return {Array} Array `x` sorted/ordered by property name `y`\n *\n * @example\n * => polyfig.sortArrayByKey([{ poly: \"poly\" }, { poly: \"fig\" }], \"poly\");\n * => [{ poly: \"fig\" }, { poly: \"poly\" }]\n */\n\nfunction sortArrayByKey(x, y) {\n    return Array.isArray(x) && x !== null\n        ? x.sort(function (a, b) {\n              return a[y] < b[y] ? -1 : a[y] > b[y] ? 1 : 0;\n          })\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = sortArrayByKey;\n","code":"function sortArrayByKey(x, y) {\n    return Array.isArray(x) && x !== null\n        ? x.sort(function (a, b) {\n              return a[y] < b[y] ? -1 : a[y] > b[y] ? 1 : 0;\n          })\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = sortArrayByKey;\n","summary":["How do you sort/order objects in an array by a common property?"],"since":["1.2.0"],"category":["Object, Array"],"params":["{Array} x - Array of objects to sort/order","{string} y - Name of property to sort/order by"],"ret":["{Array} Array `x` sorted/ordered by property name `y`"],"example":["polyfig.sortArrayByKey([{ poly: \"poly\" }, { poly: \"fig\" }], \"poly\");","[{ poly: \"fig\" }, { poly: \"poly\" }]"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":13},{"slug":"util","name":["sumArray"],"fileContents":"/**\n *\n * @name sumArray\n *\n * @summary How do you find the sum of an array of numbers?\n *\n * @since 1.4.0\n *\n * @category Array\n *\n * @param {Array} x - Array\n *\n * @return {Number} Sum of the number array elements\n *\n * @example\n * => polyfig.sumArray([1,2,3,4]);\n * => 10\n */\n\nfunction sumArray(x) {\n    return Array.isArray(x) && x !== null\n        ? x.filter((a) => typeof a === \"number\").reduce((a, b) => a + b, 0)\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = sumArray;\n","code":"function sumArray(x) {\n    return Array.isArray(x) && x !== null\n        ? x.filter((a) => typeof a === \"number\").reduce((a, b) => a + b, 0)\n        : new Error(\"x is not of type array\");\n}\n\nmodule.exports = sumArray;\n","summary":["How do you find the sum of an array of numbers?"],"since":["1.4.0"],"category":["Array"],"params":["{Array} x - Array"],"ret":["{Number} Sum of the number array elements"],"example":["polyfig.sumArray([1,2,3,4]);","10"],"dir":"/","path":"/util","extension":".json","createdAt":"2023-01-03T07:47:57.082Z","updatedAt":"2023-01-03T07:48:35.370Z","meta":{"version":0,"revision":0,"created":1672732137747},"$loki":14}],"idIndex":[1,2,3,4,5,6,7,8,9,10,11,12,13,14],"maxId":14,"_dirty":true,"_nestedProperties":[],"transactional":false,"asyncListeners":false,"disableMeta":false,"disableChangesApi":true,"disableDeltaChangesApi":true,"cloneObjects":false,"cloneMethod":"deep","changes":[],"_fullTextSearch":{"ii":{"title":{"_store":true,"_optimizeChanges":true,"docCount":0,"docStore":[],"totalFieldLength":0,"root":{}},"description":{"_store":true,"_optimizeChanges":true,"docCount":0,"docStore":[],"totalFieldLength":0,"root":{}},"slug":{"_store":true,"_optimizeChanges":true,"docCount":14,"docStore":[[0,{"fieldLength":1}],[1,{"fieldLength":1}],[2,{"fieldLength":1}],[3,{"fieldLength":1}],[4,{"fieldLength":1}],[5,{"fieldLength":1}],[6,{"fieldLength":1}],[7,{"fieldLength":1}],[8,{"fieldLength":1}],[9,{"fieldLength":1}],[10,{"fieldLength":1}],[11,{"fieldLength":1}],[12,{"fieldLength":1}],[13,{"fieldLength":1}]],"totalFieldLength":14,"root":{"k":[117],"v":[{"k":[116],"v":[{"k":[105],"v":[{"k":[108],"v":[{"d":{"df":14,"dc":[[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1]]}}]}]}]}]}},"text":{"_store":true,"_optimizeChanges":true,"docCount":0,"docStore":[],"totalFieldLength":0,"root":{}}}}}],"databaseVersion":1.5,"engineVersion":1.5,"filename":"content.db","_persistenceAdapter":null,"_persistenceMethod":null,"_throttledSaves":true}